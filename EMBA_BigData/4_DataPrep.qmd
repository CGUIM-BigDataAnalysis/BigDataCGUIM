---
title: "4. Data Preprocessing"
author: "Yi-Ju Tseng"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
editor: visual
---

# 資料清洗與處理

-   Tidy Data
-   資料型別轉換處理
-   文字字串處理
-   子集Subset
-   排序
-   資料組合
-   長表轉寬表
-   遺漏值處理

# Tidy Data

type:sub-section

Each column is a variable. Each row is an observation.

-   一個欄位（Column）內只有一個數值，最好要有凡人看得懂的Column Name
-   不同的觀察值應該要在不同列（Row）
-   一張表裡面，有所有分析需要的資料
-   如果一定要多張表，中間一定要有index可以把表串起來
-   One file, one table

# 資料型別轉換處理

type:sub-section 包括**資料型別檢查**與**資料型別轉換**

資料型別:

-   數值 (numeric)
-   字串 (character)
-   布林變數 (logic)
-   日期 (Date)

# 資料型別檢查 - is.

使用`is.`函數檢查資料型別，回傳布林變數，若為**真**，回傳**TRUE**

-   是否為**數字** `is.numeric(變數名稱)`
-   是否為**文字** `is.character(變數名稱)`
-   是否為**布林變數** `is.logical(變數名稱)`

```{r}
num<-100
is.numeric(num)
is.character(num)
```

# 資料型別檢查 - class()

使用`class(變數名稱)`函數，直接回傳**資料型別**

```{r}
class(num)
class(Sys.Date())
```

# 資料型別轉換 - as.

使用`as.`函數轉換型別

-   轉換為**數字** `as.numeric(變數名稱)`
-   轉換為**文字** `as.character(變數名稱)`
-   轉換為**布林變數** `as.logical(變數名稱)`

```{r}
cha<-"100"
as.numeric(cha)
```

# 資料型別轉換 - as.

若無法順利完成轉換，會回傳空值`NA`，並出現警告訊息

```{r}
as.numeric("abc")
```

# 資料型別轉換練習

type:alert 回想起奈米股盤中交易的資料．．．

```{r}
library(rvest) 
NanoStockUrl<-"https://fubon-ebrokerdj.fbs.com.tw/z/ze/zeg/zega_EBTW50E_I.djhtm"
NanoStockContent<-read_html(NanoStockUrl)
NanoStockName<-
  NanoStockContent %>% html_nodes("#oAddCheckbox") %>% 
    html_text()
NanoStockPrice<-
  NanoStockContent %>% html_nodes(".t3n1")%>% 
    html_text()
NanoStockPriceTable<-
  matrix(NanoStockPrice,ncol=6, byrow=TRUE)
NanoStockNameClean<-gsub('\\r|<|!|\\n|\\t|GenLink2stk|;|/|-|>',
                         '',
                         NanoStockName)
NanoStockData <- 
    data.frame(name = NanoStockNameClean,
               NanoStockPriceTable)
knitr::kable(NanoStockData) 
```

# 資料型別轉換練習

type:alert 成交股數、總成交值都是字串型別 (chr)

```{r}
str(NanoStockData)
```

該如何將這兩個欄位轉成數字呢？

# 文字字串處理

type:sub-section

-   基本處理
-   搜尋字串
-   [Regular Expression 正規表示式 \@ R](https://github.com/CGUIM-BigDataAnalysis/BigDataCGUIM/blob/master/105/RegularExpression.md)

# 基本處理

-   切割 `strsplit()` **Split**
-   子集 `substr()` **sub string**
-   大小寫轉換 `toupper()` `tolower()`
-   兩文字連接 `paste()` `paste0()`
-   文字取代 `gsub()` **substitute**
-   前後空白去除 `str_trim()` 需安裝`stringr` package **trim**

# 基本處理-切割

strsplit (欲切割的字串,用什麼符號切割)

```{r}
strsplit ("Hello World"," ")
```

# 基本處理-切割（多字元）\|

strsplit (欲切割的字串,切割符號1\|切割符號2\|...)

```{r}
strsplit ("Hello World"," |o")
```

# 基本處理-子集（切一小段）

substr(欲做子集的字串,開始位置,結束位置)

```{r}
substr("Hello World", start=2,stop=4)
```

# 基本處理-大小寫轉換

```{r}
toupper("Hello World")
tolower("Hello World")
```

# 基本處理-兩文字連接

paste(欲連接的字串1, 欲連接的字串2, 欲連接的字串3,.... sep=中間用什麼符號分隔)

```{r}
paste("Hello", "World")
paste("Hello", "World", sep='')
paste0("Hello", "World")
```

# 基本處理-文字取代

gsub(想要換掉的舊字串,想要換成的新字串,欲作取代的完整字串)

```{r}
gsub("o","0","Hello World")
```

# 基本處理-文字取代（多字元）\|

gsub(想要換掉的舊字串1\|想要換掉的舊字串2\|...,想要換成的新字串,欲作取代的完整字串)

```{r}
gsub("o|l","0","Hello World")
```

# 基本處理-前後空白去除

str_trim要使用前需要安裝與載入**stringr**套件

```{r}
library(stringr)
str_trim(" Hello World ")
```

# 搜尋字串

-   通常使用在**比對文字向量**
-   **有分大小寫**
-   依照回傳值的型態不同，有兩種常用函數
    -   回傳符合條件之向量位置(index) `grep(搜尋條件,要搜尋的向量)`
    -   回傳每個向量是否符合條件(TRUE or FALSE) `grepl(搜尋條件,要搜尋的向量)`

```{r}
##在姓名文字向量中尋找A，回傳包含"A"之元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
```

# 搜尋字串 - grepl()

```{r}
##在姓名文字向量中尋找A，回傳各元素是否包含"A"
grepl("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳各元素是否包含"a"
grepl("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

# 搜尋字串 - grep()

```{r}
##在姓名文字向量中尋找A，回傳包含"A"的元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳包含"a"的元素位置
grep("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

# 搜尋字串 - grep()

type:alert 多字元？

# 子集Subset - 一維資料

type:sub-section

之前有介紹使用`[ ]`取出單一或多個元素的方法

```{r}
letters ##R語言內建資料之一
letters[1] ##取出letters向量的第一個元素
```

# 子集Subset - 一維資料

也可以用“負號”去掉不要的資料

```{r}
letters[c(1,3,5)] ##取出letters向量的第1,3,5個元素
letters[c(-1,-3,-5)] ##取出letters向量除了第1,3,5個元素之外的所有元素
```

# 子集Subset - 一維資料

若想要快速取得一向量的開頭與結尾元素，可使用`head()`和`tail()`函數

```{r}
head(letters,5) ##取出letters向量的前五個元素
tail(letters,3) ##取出letters向量的後三個元素
```

# 子集Subset - 二維資料

type:sub-section - 可針對列(Row)和行(Column)做子集 - 使用`[ ]`，但因應二維資料的需求，以`,`分隔列與行的篩選條件 - 資料篩選原則為**前Row,後Column**，**前列,後行** - 若不想篩選列，則在`,`前方保持**空白**即可。 - 篩選方式可輸入**位置(index)**、**欄位名稱**或輸入**布林變數(TRUE/FALSE)** - 輸入位置: `dataFrame[row index,column index]` - 輸入布林變數: `dataFrame[c(T,F,T),c(T,F,T)]` - 輸入欄位名稱: `dataFrame[row name,column name]` - 最後常用的是dplyr中的`select()`和`filter()`功能

# 子集Subset - head()

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數

```{r eval=F}
head(iris,5) ##取出iris資料框的前五列
```

```{r echo=F}
knitr::kable(head(iris,5)) 
```

# 子集Subset - tail()

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數

```{r eval=F}
tail(iris,3) ##取出iris資料框的後三列
```

```{r echo=F}
knitr::kable(tail(iris,3))
```

# 資料組合

type:sub-section

有時需要在資料框新增一列，或新增一行

-   Row 列的組合 `rbind()`
-   Column 行的組合 `cbind()`

`rbind()`和`cbind()`的參數可以是向量，也可以是資料框

# 資料組合 - rbind()

使用向量做資料整合範例:

```{r}
rbind(c(1,2,3), #第一列
      c(4,5,6)  #第二列
      ) 
```

# 資料組合 - rbind()

使用資料框與向量做資料整合範例:

```{r warning=F}
irisAdd<-rbind(iris, #資料框
      c(1,1,1,1,"versicolor")  #新增一列
      ) 
```

```{r eval=F}
tail(irisAdd,2)
```

```{r echo=F}
knitr::kable(tail(irisAdd,2)) 
```

# 資料組合 - cbind()

使用向量做資料整合範例:

```{r}
cbind(c(1,2,3), #第一行
      c(4,5,6)  #第二行
      ) 
```

# 資料組合 - cbind()

使用資料框與向量做資料整合範例:

```{r warning=F}
irisAdd<-cbind(iris, #資料框
      rep("Add",nrow(iris))  #新增一行
      ) 
```

```{r eval=F}
tail(irisAdd,1)
```

```{r echo=F}
knitr::kable(tail(irisAdd,1)) 
```

# 資料結合 (Join)

除了按照行列順序的組合外，更常有的情形是依照某個欄位的值作為結合依據，如：

-   用學號把以下兩個資料框結合成一個資料框
    -   學號與姓名資料框
    -   學號與宿舍床位資料框
-   用縣市名稱與年度將人口資料與醫療資源資料結合

# 資料結合 (Join)

原生的R環境可以用`merge()`函數將資料框結合，使用方法為`merge(資料框1,資料框2,by="結合依據欄位")`

```{r}
nameDF<-data.frame(ID=c(1,2,3,4,5),
                  Name=c("Amy","Bob","Chris","David","Emma"))
scoreDF<-data.frame(ID=c(1,2,4),
                  Score=c(60,90,50))
```

# 資料結合 (Join)

```{r, eval=F}
nameDF
```

```{r, echo=F}
knitr::kable(nameDF)
```

------------------------------------------------------------------------

```{r, eval=F}
scoreDF
```

```{r, echo=F}
knitr::kable(scoreDF)
```

# 資料結合 (Join) 更有效率的做法

`dplyr`套件提供更有效率的資料結合方法，包括:

-   inner_join()：保留有對應到的資料
-   left_join()：保留左邊資料框的所有資料
-   right_join()：保留右邊資料框的所有資料
-   full_join()：保留所有資料
-   semi_join()
-   anti_join()

# 資料結合 - inner_join()

只保留兩張表都有的列 使用方法 `inner_join(x, y, by = )`

```{r}
library(dplyr)
inner_join(nameDF,scoreDF,by="ID")
```

# 資料結合 - left_join()

保留左邊的表所有的列 使用方法 `left_join(x, y, by = )`

```{r}
library(dplyr)
left_join(nameDF,scoreDF,by="ID")
```

# 資料結合 - right_join()

保留右邊的表所有的列 使用方法 `right_join(x, y, by = )`

```{r}
library(dplyr)
right_join(nameDF,scoreDF,by="ID")
```

# 資料結合 - full_join()

保留所有的列 使用方法 `full_join(x, y, by = )`

```{r}
library(dplyr)
full_join(nameDF,scoreDF,by="ID")
```

# 資料結合 - semi_join()

留下左邊的ID也有出現在右邊的表的列，右表資料不會輸出 使用方法 `semi_join(x, y, by = )`

```{r}
library(dplyr)
semi_join(nameDF,scoreDF,by="ID")
```

# 資料結合 - anti_join()

留下左邊的ID沒有出現在右邊的表的列，右表資料不會輸出 使用方法 `anti_join(x, y, by = )`

```{r}
library(dplyr)
anti_join(nameDF,scoreDF,by="ID")
```

# 資料結合練習

type:alert

-   下載[COVID-19案例數資料](https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv)
-   下載[COVID-19死亡數資料](https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv)
-   分別讀入兩個csv檔
-   依照Province/State,Country/Region,Lat,Long四個欄位，將兩張表格結合，只留下有對應到的資料
-   請問結合後的資料有幾列？

# 長表與寬表

type:sub-section

-   在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作
-   `tidyr` package提供完整的轉換功能
    -   寬表轉長表 `pivot_longer(資料框/寬表,cols=需要轉換成長表的欄位)`
    -   長表轉寬表 `pivot_wider(資料框/長表,names_from=需要轉換成寬表的欄位)`

# 長表與寬表

原來的`airquality`資料框中，有Ozone, Solar.R, Wind, Temp, Month, Day等六個欄位 (Column)，屬於寬表

```{r eval=F}
head(airquality,3)
```

```{r echo=F}
knitr::kable(head(airquality,3)) 
```

# 寬表轉長表 pivot_longer（）

-   保留Month和Day兩個欄位
-   消滅Ozone, Solar.R, Wind, Temp
-   將其他欄位的名稱整合至name欄位，數值整合至value欄位

```{r}
library(tidyr)
##欄位需要保留"Month","Day"
##欄位需要消滅"Ozone","Solar.R","Wind","Temp" -> 換轉換成"name"
airqualityLong<-
  pivot_longer(airquality,
               cols = c("Ozone","Solar.R","Wind","Temp")) 
```

```{r eval=F}
head(airqualityLong)
```

```{r echo=F}
knitr::kable(head(airqualityLong)) 
```

# 寬表轉長表 pivot_longer（）

-   保留Month和Day兩個欄位
-   消滅Ozone, Solar.R, Wind, Temp
-   將其他欄位的名稱整合至name欄位，數值整合至value欄位

```{r}
library(tidyr)
##欄位需要保留"Month","Day"
##欄位需要消滅"Ozone","Solar.R","Wind","Temp" -> 換轉換成"name"
airqualityLong<-
  pivot_longer(airquality,
               cols = c(-"Month",-"Day")) 
```

```{r eval=F}
head(airqualityLong)
```

```{r echo=F}
knitr::kable(head(airqualityLong)) 
```

# 長表轉寬表 pivot_wider（）

-   `airqualityLong`資料框中，剩下Month, Day, name, value等四個欄位 (Column)，屬於長表
-   variable欄位的值轉換為新欄位，並將value欄位填回新增的欄位

```{r}
##增加欄位由name定義
airqualityWide<-
  pivot_wider(airqualityLong, 
              names_from="name") 
```

```{r eval=F}
head(airqualityWide)
```

```{r echo=F}
knitr::kable(head(airqualityWide))
```

# 遺漏值處理

type:sub-section

-   遺漏值(Missing Value)常常出現在真實資料內，在數值運算時常會有問題
-   最簡單的方法是將有缺值的資料移除

# 遺漏值處理 is.na()

如資料為向量，可使用`is.na()`來判斷資料是否為空值`NA`，若為真`TRUE`，則將資料移除。

```{r}
naVec<-c("a","b",NA,"d","e")
is.na(naVec)
naVec[!is.na(naVec)] ##保留所有在is.na()檢查回傳FALSE的元素
```

# 遺漏值處理 complete.cases()

若資料型態為資料框，可使用`complete.cases`來選出完整的資料列，如果資料列是完整的，則會回傳真TRUE

```{r eval=F}
head(airquality,5)
```

```{r echo=F}
knitr::kable(head(airquality,5))
```

```{r}
complete.cases(airquality) 
```

# 遺漏值處理 complete.cases()

若資料型態為資料框，可使用`complete.cases`來選出完整的資料列，如果資料列(row)是完整的，則會回傳真TRUE

```{r eval=F}
head(airquality[complete.cases(airquality),]) ##保留所有在complete.cases()檢查回傳TRUE的元素
```

```{r echo=F}
knitr::kable(head(airquality[complete.cases(airquality),]))
```
